<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@clintcparker</title>
    <description>Writings on software development, testing, and architecture. .NET C# Tools Testing whiteboarding design
</description>
    <link>https://clintcparker.com/</link>
    <atom:link href="https://clintcparker.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Jan 2023 12:41:45 -0800</pubDate>
    <lastBuildDate>Tue, 24 Jan 2023 12:41:45 -0800</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>When to Microservice</title>
        <description>&lt;p&gt;I’m enjoying Microsoft Build 2022. Developer experience (especially in the face of common and complicated IaaS and PaaS scenarios) was my favorite topic of the day 1 keynotes.&lt;/p&gt;

&lt;p&gt;Later, watching the keynote after hours, I stumbled on a gem of a conversation between Scott Hanselman and Scott Guthrie.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great informal discussion/perspective on when to use micro-services &amp;amp; containers from &lt;a href=&quot;https://twitter.com/shanselman?ref_src=twsrc%5Etfw&quot;&gt;@shanselman&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/scottgu?ref_src=twsrc%5Etfw&quot;&gt;@scottgu&lt;/a&gt; at 33:18.&lt;a href=&quot;https://t.co/1tNahY1VSk&quot;&gt;https://t.co/1tNahY1VSk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Clint Parker (@clintcparker) &lt;a href=&quot;https://twitter.com/clintcparker/status/1529577253423566848?ref_src=twsrc%5Etfw&quot;&gt;May 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Lot’s of classic “it depends” which is totally true. For me it depends on at least one of three macro factors being present:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Teams/people need to develop and deploy at different paces.&lt;/li&gt;
  &lt;li&gt;Parts of the system &lt;em&gt;need&lt;/em&gt; to scale independently&lt;/li&gt;
  &lt;li&gt;Parts of the system &lt;em&gt;need&lt;/em&gt; to be segmented for security purposes. Ex: only engineers from the payments team can make changes to payments systems.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can have any decomposition you like, but in that video Scott Guthrie alludes to the challenges you can face on either end of the spectrum (1 engineer with 100 micro-services or 100 engineers with one service).&lt;/p&gt;

&lt;p&gt;One last note, I may start saying containers instead of micro-services going forward. I usually try say that I prefer macro-services, but then we have to have a whole discussion about the difference. Maybe the term container will become the defacto descriptor of services and their boundaries.&lt;/p&gt;

</description>
        <pubDate>Wed, 25 May 2022 14:52:58 -0700</pubDate>
        <link>https://clintcparker.com/2022/05/25/when-to-micro-service/</link>
        <guid isPermaLink="true">https://clintcparker.com/2022/05/25/when-to-micro-service/</guid>
        
        
      </item>
    
      <item>
        <title>Software Leadership - Fostering the Team</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I’ve been meaning to write my thoughts on software leadership for a while. I’ll try to do tht here with a series of posts on the topic. Let’s start with &lt;strong&gt;fostering a strong team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First of all, most teams are already great, they may just not know or show it. The talent is usually already in the building. I’m confident in the abilities and potential of most engineering team members to succeed with any project we throw at them.&lt;/p&gt;

&lt;p&gt;But all teams can do better. We can do better as organizations leaders by setting a good example. And we can start by setting an example in 3 key ways: &lt;strong&gt;Transparency&lt;/strong&gt;, &lt;strong&gt;Respect&lt;/strong&gt;, and &lt;strong&gt;Accountability&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;transparency&quot;&gt;Transparency&lt;/h2&gt;
&lt;p&gt;One thing I am not confident in most teams to do, is communicate the company vision. I think very few of developers could tell you how what they’re &lt;em&gt;currently&lt;/em&gt; working on lines up with company goals, or what priority it is.&lt;/p&gt;

&lt;p&gt;We can start to change this with transparency, which happens to also be a core tenet of Scrum. By being transparent, as leaders, as an organization, we can empower our product development teams to make good, informed decisions about their projects. And we can show them the visible importance of their work on our backlog.&lt;/p&gt;

&lt;p&gt;In setting this example, we can expect the same from them. It is as simple as professional courtesy. We can show our steps in decision making, and they can show theirs. The same goes for progress. This expected transparency will increase mutual understanding between product development and all other departments and department heads.&lt;/p&gt;

&lt;p&gt;By increasing this communication and buy-in, we will provide our teams with intrinsic motivation. We will all be purpose-driven, and we will see better results in quality and productivity.&lt;/p&gt;

&lt;h2 id=&quot;respect&quot;&gt;Respect&lt;/h2&gt;
&lt;p&gt;Respect may be the hardest thing to foster in our product development team. From my perspective, mutual respect between all members of a team is often missing in many of the relationships. Sometimes it is simply person to person, but other times it is person to department. A lot of the time it is person to organization. And again, we can fix this by setting an example. We can lean on our teams harder than we have to date. We can expect great things, and we can communicate our expectations. And not just verbally. We really need to trust our teams to solve problems, and not to simply follow instructions.&lt;/p&gt;

&lt;p&gt;I often see team members hesitating to make suggestions or question the projects goals. This is a bad thing. We should be fostering these conversations, because these conversations lead to innovation and creative solutions. Let’s encourage questions, and expect great solutions from our development teams.&lt;/p&gt;

&lt;h2 id=&quot;accountability&quot;&gt;Accountability&lt;/h2&gt;
&lt;p&gt;With our freshly conveyed respect, we gain accountability.&lt;/p&gt;

&lt;p&gt;Most notions of accountability come from negative perspectives. We only need to foster accountability because we need someone to be accountable for something that has gone wrong. It’s true, and from time to time we need in our organizations. It’s also a key part of coaching. And sometimes, it’s a good motivator to know that if a project fails, some person or group can be held accountable.&lt;/p&gt;

&lt;p&gt;The concept I think everyone misses with accountability, though, is that it’s a two way street. Early in my career, I worked on a team for 18 months before I knew about my accountability for someone’s &lt;em&gt;positive&lt;/em&gt; experience with our software. That’s right, for a year and a half, the only post-release feedback I received for my code was the negative type. Obviously my team appreciated my work, but all I really ever saw beyond that were the bugs.&lt;/p&gt;

&lt;p&gt;The feedback loop needs to continue regardless of the feedback.&lt;/p&gt;

&lt;p&gt;We all go to many postmortems when something our team worked on broke. We rarely go to a meeting to explain why or how something our team worked on was produced so well. As engineering leaders, we need to be asking a lot more questions of the successful teams than the unsuccessful ones. We should maximize our success instead of minimizing our failure.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s amusing how little software leadership has to do with the actual software sometimes. I promise I will have some more technical leadership topics in the future, but many will be like this. I hope some of this will help you with your teams. As always feel free to send any comments to me on Twitter at &lt;em&gt;&lt;a href=&quot;https://twitter.com/clintcparker&quot;&gt;@clintcparker&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Apr 2022 13:11:39 -0700</pubDate>
        <link>https://clintcparker.com/2022/04/13/software-leadership-fostering-the-team/</link>
        <guid isPermaLink="true">https://clintcparker.com/2022/04/13/software-leadership-fostering-the-team/</guid>
        
        
      </item>
    
      <item>
        <title>RDP Tunnels</title>
        <description>&lt;h3 id=&quot;rationale&quot;&gt;Rationale&lt;/h3&gt;

&lt;p&gt;I love the persistence of a host machine! I’m too cheap to get a VPS. I really like the windows 11 OS but really love mac laptops. I left &lt;code class=&quot;highlighter-rouge&quot;&gt;3389&lt;/code&gt; open on my router (with DDNS) and found myself getting brute forced. I saw &lt;a href=&quot;https://orth.uk/ssh-over-cloudflare/&quot;&gt;this post&lt;/a&gt; around the same time, and realized tunnelling could be a great alternative.&lt;/p&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;

&lt;h4 id=&quot;general-assumptions&quot;&gt;General Assumptions&lt;/h4&gt;

&lt;p&gt;I wrote this for my situation. While setting it up, I found there was not a central guide, so I made one. If it doesn’t perfectly fit your situation, hopefully a part of it will help.&lt;/p&gt;

&lt;h4 id=&quot;assumptions-about-you&quot;&gt;Assumptions About You&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;You have administrator access to both machines&lt;/li&gt;
  &lt;li&gt;You are comfortable with the command line on both systems&lt;/li&gt;
  &lt;li&gt;You have &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;VSCode&lt;/a&gt; installed on both machines&lt;/li&gt;
  &lt;li&gt;You’re aware of the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;SSH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You have a &lt;a href=&quot;https://www.cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; account and a website there&lt;/li&gt;
  &lt;li&gt;You’re using &lt;a href=&quot;https://brew.sh&quot;&gt;brew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;assumptions-about-this-guide&quot;&gt;Assumptions About This Guide&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve got &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; on my cloudflare account (I don’t, &lt;em&gt;obvs&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;My tunnel is named &lt;code class=&quot;highlighter-rouge&quot;&gt;wormhole&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;My tunnel id is 123455677890asdf&lt;/li&gt;
  &lt;li&gt;My macOS username is &lt;code class=&quot;highlighter-rouge&quot;&gt;me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;host-setup&quot;&gt;Host Setup&lt;/h3&gt;
&lt;h4 id=&quot;windows-setup&quot;&gt;Windows Setup&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;get pwsh (i used &lt;code class=&quot;highlighter-rouge&quot;&gt;winget&lt;/code&gt;)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; winget install Microsoft.PowerShell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;At the time of writing, should be v7.2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;install chocolatey at &lt;a href=&quot;&quot;&gt;https://chocolatey.org/&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; Set-ExecutionPolicy Bypass -Scope Process -Force [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;install cloudflared via chocolatey&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; choco install cloudflared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;login
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; cloudflared login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;you may need to manually open the link in the
output and select the site you’d like to add the tunnel to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;create a tunnel
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; cloudflared tunnel create wormhole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;setup cloudflared as a service
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; cloudflared service install
PS&amp;gt; mkdir C:\Windows\System32\config\systemprofile\.cloudflared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;create a config
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; code C:\Windows\System32\config\systemprofile\.cloudflared\config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;example:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;tunnel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123455677890asdf&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;credentials-file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;C:\Windows\System32\config\systemprofile\.cloudflared\123455677890asdf.json&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wormhole.example.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssh://localhost:22&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http_status:404&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;set service as automatic&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; Set-Service -Name Cloudflared -StartupType &quot;Automatic&quot;
PS&amp;gt; Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\Cloudflared\ -Name ImagePath -Value &quot;C:\ProgramData\chocolatey\lib\cloudflared\tools\cloudflared.exe --config=C:\Windows\System32\config\systemprofile\.cloudflared\config.yml tunnel run&quot;
PS&amp;gt; cloudflared tunnel route dns  wormhole.example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add a non-admin user (for ssh only). enter a paasword when prompted&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; New-LocalUser -Name me-ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;set pwsh as your default shell&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; New-ItemProperty -Path &quot;HKLM:\SOFTWARE\OpenSSH&quot; -Name DefaultShell -Value &quot;C:\Program Files\PowerShell\7\pwsh.exe&quot; -PropertyType String -Force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create external user .ssh directory to house authorized_keys&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; mkdir C:\Users\me-ssh\.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;modify sshd_config&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; code C:\ProgramData\ssh\sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;enable publickey authentication, uncomment this line&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;PubkeyAuthentication yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;setup sshd &amp;amp; ssh-agent as automatic services, and start them&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS&amp;gt; Set-Service -Name sshd -StartupType &quot;Automatic&quot;; Set-Service -Name ssh-agent -StartupType &quot;Automatic&quot;; Start-Service sshd; Start-Service ssh-agent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;client-config&quot;&gt;Client Config&lt;/h3&gt;

&lt;h4 id=&quot;macos&quot;&gt;MacOS&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;make sure developer tools are up to date&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; brew install cloudflare/cloudflare/cloudflared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;to confirm install&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; cloudflared -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Login (just like on the host setup)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; cloudflared login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A browser window should have opened.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If the browser failed to open, please visit the output URL directly in your browser.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Select the site you want to to log in to
    &lt;ul&gt;
      &lt;li&gt;after selecting you’ll see in the terminal&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; You have successfully logged in.
 If you wish to copy your credentials to a server, they have been saved to:
 /Users/yourusername/.cloudflared/cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;next, update your hosts file
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; code ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;add the following&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host *.example.com
    ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;now you can ssh into the box directly
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $&amp;gt; ssh me-ssh@wormhole.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But let’s take this further for RDP and setup local forwarding&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $&amp;gt; ssh -L 56789:127.0.0.1:3389 me-ssh@wormhole.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Setup pub key and add to host
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cat ./.ssh/id_rsa.pub | ssh me-ssh@wormhole.example.com &quot;echo | Out-File -FilePath ~/.ssh/authorized_keys -Append&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;further-thoughts&quot;&gt;Further thoughts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Connect to the tunnel from the client machine on startup
https://mpharrigan.com/2016/05/17/background-ssh.html&lt;/li&gt;
  &lt;li&gt;Remove the password from the newly created user&lt;/li&gt;
  &lt;li&gt;Change default ports (ssh, RDP)&lt;/li&gt;
  &lt;li&gt;Restrict RDP access to 127.0.0.1 only&lt;/li&gt;
  &lt;li&gt;Create a host and client scripts to just take care of all of this&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 24 Feb 2022 20:27:51 -0800</pubDate>
        <link>https://clintcparker.com/2022/02/24/rdp-tunnels/</link>
        <guid isPermaLink="true">https://clintcparker.com/2022/02/24/rdp-tunnels/</guid>
        
        
      </item>
    
      <item>
        <title>Belvedere</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/dotnet/images/hub/netcore.svg&quot; alt=&quot;dotnetcore&quot; class=&quot;r-img&quot; height=&quot;150px&quot; /&gt;I recently created &lt;a href=&quot;https://name-on.clintcparker.com&quot;&gt;name-on&lt;/a&gt; using the DotNetCore command line tools and VS Code. It was surprisingly easy, and I love scaffolding from the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://fishshell.com/assets/img/Terminal_Logo_CRT_Small.png&quot; alt=&quot;fish-shell&quot; class=&quot;l-img&quot; height=&quot;200px&quot; /&gt;I also recently got my WSL setup working, which involved setting fish as my default shell, and revisiting some of the functions I have made in the past.&lt;/p&gt;

&lt;p&gt;My quick experience with the DNC CLI seemed like the perfect thing to functionalize. I like having a standard structure to my apps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;class library&lt;/li&gt;
  &lt;li&gt;command line&lt;/li&gt;
  &lt;li&gt;web app / API&lt;/li&gt;
  &lt;li&gt;test project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DNC has the concept of tmeplates and extensions, but what can I say, I wanted to write this with fish. So I did.&lt;/p&gt;

&lt;p&gt;I picked the name belvedere by looking up scaffolding in a thesaurus. Apparently its a “raised turret atop a house,” and comes from 1590’s italian.&lt;/p&gt;

&lt;p&gt;Belvedere will create all the necessary projects, with the correct intra-project references, a solution, gitignore, and README. It also intializes a git repo and commits the created files.&lt;/p&gt;

&lt;p&gt;You can find the code here: &lt;a href=&quot;https://github.com/clintcparker/fish_functions/blob/master/belvedere.fish&quot;&gt;https://github.com/clintcparker/fish_functions/blob/master/belvedere.fish&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Sep 2018 16:22:49 -0700</pubDate>
        <link>https://clintcparker.com/2018/09/21/belvedere/</link>
        <guid isPermaLink="true">https://clintcparker.com/2018/09/21/belvedere/</guid>
        
        
      </item>
    
      <item>
        <title>Name-on</title>
        <description>&lt;h3 id=&quot;but-y-tho&quot;&gt;But Y tho?&lt;/h3&gt;
&lt;p&gt;I needed a unique name generator, so I built &lt;a href=&quot;https://name-on.clintcparker.com/&quot;&gt;one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had used the Heroku unique-name generator before, when building &lt;a href=&quot;https://badideas.herokuapp.com/&quot;&gt;bad ideas&lt;/a&gt;. I loved how it removed a mental hurdle from getting something out the door; coming up with a name. Personally, I’m horrible at naming things, so this was a necessity. I don’t want to get hung up on picking a good name, and the defaults are equally as bad (ConsoleApplication23, anybody?).&lt;/p&gt;

&lt;p&gt;I’d also been wanting to get back to dot net core. The last time I had played around with it, they were still using the &lt;code class=&quot;highlighter-rouge&quot;&gt;dnx&lt;/code&gt; command line tool and &lt;code class=&quot;highlighter-rouge&quot;&gt;project.json&lt;/code&gt; files. So this project seemed small enough, and valuable enough, to actually keep me on task for the duration of v1.&lt;/p&gt;

&lt;h3 id=&quot;the-command-line&quot;&gt;The command line&lt;/h3&gt;
&lt;p&gt;I was stoked to be able to layout the project structure from the command line. I’m just so much more optimistic about a tool when there’s a CLI behind it. Even if I’ll never script it, the idea that i &lt;em&gt;could&lt;/em&gt; is very appealing.&lt;/p&gt;

&lt;p&gt;I scaffolded the whole project via the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet add&lt;/code&gt; commands. I was also able to build and test in the same manner. It was a nice break from VS 2017.&lt;/p&gt;

&lt;h3 id=&quot;structure&quot;&gt;Structure&lt;/h3&gt;
&lt;p&gt;I found lists of adjectives and nouns online. And thank to some recent practice with regex crosswords, quickly stripped everything but the words themselves.&lt;/p&gt;

&lt;p&gt;I added some tests for uniqueness, which is about 99.985%. I also added protection for never getting the same name twice in a row.&lt;/p&gt;

&lt;p&gt;I was able to create a CLI for OS X, which was came in handy when publishing to Azure, and needing names for everything.&lt;/p&gt;

&lt;p&gt;For the web app the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet help&lt;/code&gt; lists a template called &lt;code class=&quot;highlighter-rouge&quot;&gt;razor&lt;/code&gt; with the description “mvc with razor pages.” I’ve used the Razor syntax since it debuted, and thought, “of course I want razor, not &lt;code class=&quot;highlighter-rouge&quot;&gt;aspx&lt;/code&gt;.” Apparently though, Razor Pages is a new thing. I actually really liked it for build the web app component. I still created a controller for the API, but was happy I stumbled onto this new paradigm.&lt;/p&gt;

&lt;p&gt;I really went over the top with the completeness. Azure for hosting. Custom domain through NameCheap. SSL through CloudFlare.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/clintcparker/name-on#name-on&quot;&gt;README&lt;/a&gt; has a roadmap, which includes packaging the CLI and improving the site. PRs are welcomed.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Aug 2018 16:22:49 -0700</pubDate>
        <link>https://clintcparker.com/2018/08/31/name-on/</link>
        <guid isPermaLink="true">https://clintcparker.com/2018/08/31/name-on/</guid>
        
        
      </item>
    
      <item>
        <title>Adventures in vs Extension Updates</title>
        <description>&lt;p&gt;While at &lt;a href=&quot;https://developer.microsoft.com/en-us/events/build/content&quot;&gt;//build&lt;/a&gt; I was inspired to update my extensions to support VS 2017. I meant to do it last year, but got distracted. The process was really simple, and is &lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/extensibility/how-to-migrate-extensibility-projects-to-visual-studio-2017&quot;&gt;outlined&lt;/a&gt; on the new hotness that is &lt;a href=&quot;https://docs.microsoft.com&quot;&gt;MS Docs&lt;/a&gt;. It took me about 10 minutes to get it all configured an tested. But then…I was sidelined by my CI config.&lt;/p&gt;

&lt;p&gt;For some reason, my &lt;a href=&quot;https://www.appveyor.com/&quot;&gt;AppVeyor&lt;/a&gt; builds were failing. They were clearly pulling the latest from my repo, but for some reason, the nuget restore stopped working. I probably should’ve googled the issue, and I think I did, but I was asking the wrong questions. I finally gave up and manually configured the build via the GUI, and then exported that config to YAML. When I went to do the next extension, I finally realized what the problem was. I used the exact same exported YAML, and got the exact same initial errors with the nuget restore.&lt;/p&gt;

&lt;p&gt;Googling “appveyor not using yaml” led me to &lt;a href=&quot;https://help.appveyor.com/discussions/questions/4148-why-does-appveyor-seem-not-to-pick-up-my-appveyoryml&quot;&gt;this help article&lt;/a&gt;. I still don’t understand why permissions were an issue to read the &lt;code class=&quot;highlighter-rouge&quot;&gt;appveyor.yml&lt;/code&gt;, when it was clearly reading an updated &lt;code class=&quot;highlighter-rouge&quot;&gt;csproj&lt;/code&gt; file. But I do now have extensions that support VS 2017.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 May 2018 16:22:49 -0700</pubDate>
        <link>https://clintcparker.com/2018/05/15/adventures-in-vs-extension-updates/</link>
        <guid isPermaLink="true">https://clintcparker.com/2018/05/15/adventures-in-vs-extension-updates/</guid>
        
        
      </item>
    
      <item>
        <title>Data Driven</title>
        <description>&lt;p&gt;This video absolutely changed my life. My friend and mentor showed it to me in the beginning of 2015. The early experiences of Etsy immediately resonated with me. And the concept of geometric growth being outside of the control of the business was something that I had never before considered, but absolutely made sense.&lt;/p&gt;

&lt;p&gt;Don’t pick projects based on what’s cool, pick projects  that make sense to the company.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SZOeV-S-2co&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Thu, 17 Aug 2017 13:41:08 -0700</pubDate>
        <link>https://clintcparker.com/2017/08/17/data-driven/</link>
        <guid isPermaLink="true">https://clintcparker.com/2017/08/17/data-driven/</guid>
        
        
      </item>
    
      <item>
        <title>C# Obfuscation</title>
        <description>&lt;p&gt;You can use the underscore to write ridiculous code.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt; is a valid class name. &lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt; is a valid namespace. &lt;code class=&quot;highlighter-rouge&quot;&gt;__()&lt;/code&gt; is a valid method. And, &lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt; is a valid property.&lt;/p&gt;

&lt;p&gt;I stumbled upon this a few years ago , but hadn’t gotten around to writing it down. It’s really fun to play with. I thinkt the next step is to create an obfuscator extension.&lt;/p&gt;

&lt;p&gt;Here’s a simple class from when I was teaching intro to C# and demonstrating async and await.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;A_A.Library&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileAccess&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadToEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigTxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigTxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndOfStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadLineAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s it is again, obfuscated. Still compiles, still valid C#.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;___&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadToEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndOfStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadLineAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;P.S. Who want’s to help me write the obfuscator?&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 12:02:45 -0700</pubDate>
        <link>https://clintcparker.com/2016/10/01/c-obfuscation/</link>
        <guid isPermaLink="true">https://clintcparker.com/2016/10/01/c-obfuscation/</guid>
        
        
      </item>
    
      <item>
        <title>Why Git Works Where TFVC Doesn't</title>
        <description>&lt;p&gt;We’re in the process of moving to git right now, and one of the main questions I get is how will this ACTUALLY be any better than TFVC. (The other question is how much longer before we’re fully moved to git? Which warrants its own piece.)&lt;/p&gt;

&lt;p&gt;See, we’ve tried “branching” in TFVC, and it only caused us more pain. So there is some legitimacy to this question.&lt;/p&gt;

&lt;p&gt;We were doing some hard core bastardized scrum, and had successfully split our department into scrum teams. Who would work on all kinds of stuff each sprint. Maybe half the team was working on a global refactoring of a pattern, maybe the other was working on migrating some  key workflows from our old static classes to new workflows leveraging dependency injection. Either way, different work with different timeframes.&lt;/p&gt;

&lt;p&gt;Because we’re agile, we need to be able to work on lots of different things at any given time. But branching in TFVC is different than it is in git. A branch in TFVC is immediately available to everybody to see. And it never really goes away, but you can hide it (cool!). But you can’t use that name again (bummer).&lt;/p&gt;

&lt;p&gt;Since it never goes away, and we didn’t want to be constantly reminded of our bad branch naming, we picked a very generic naming scheme. Git branching would say be specific with you’re development branch names. But ours were Work-1, Work-2, .etc. We had about 10 teams at that point, and we ended up with 32 “work” branches.&lt;/p&gt;

&lt;p&gt;Ok, 32, not too bad. But it was. 32 is not enough for the number of features &amp;amp; bug fixes being developed by 10 (and growing) teams. We probably needed 100-500 to have actually been successful. But with generic names like work-2, it’s hard to keep track of ownership. So we stopped at 32.&lt;/p&gt;

&lt;p&gt;And this is where it got messy.&lt;/p&gt;

&lt;p&gt;Scenario: The team is working on three different things in Work-14. One is done, while two are in progress. That whole branch has to be brought in now. Because that one completed feature is made up of 100 different changesets over six weeks. So we can’t just cherry pick that one feature. And now we’ve brought in two half-done features into mainline. We’re constantly testing mainline, so we feel OK about this, but the reality is that it’s not mainline that causes the problem. 
Another team just got two half done projects dumped into their branch, because they rebased from mainline. And not just one other team, but nine. And then they’re all propagating that back out to everybody else.&lt;/p&gt;

&lt;p&gt;In the end, the chaos comes from the unfinished work being forced into everybody’s “clean” branches. But we’re actually paying extra for that chaos, because we now have to constantly rebase and merge branches, which takes time and understanding of a myriad of incongruent changes.&lt;/p&gt;

&lt;p&gt;Earlier I said we’ve “tried” branching. We did. And then we abandoned it. We still have the chaos, but not the extra cost. Everybody commits to mainline, it is constantly under test, and we ship often. Builds break, and it affects everybody, but it gets resolved quickly.&lt;/p&gt;

&lt;p&gt;I’m of the belief that is has made our developers better, knowing the impact of a bad commit. But it isn’t easy.&lt;/p&gt;

&lt;p&gt;So we’re switching to git. And we can have as many branches as we want. And they can be local. And they can have good names. And they can be deleted. And we can still commit to mainline if we want to.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Sep 2016 15:29:00 -0700</pubDate>
        <link>https://clintcparker.com/2016/09/28/why-git-works-where-tfvc-doesnt/</link>
        <guid isPermaLink="true">https://clintcparker.com/2016/09/28/why-git-works-where-tfvc-doesnt/</guid>
        
        
      </item>
    
      <item>
        <title>How Yield Works</title>
        <description>&lt;p&gt;This code should work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShouldWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But it doesn’t.&lt;/p&gt;

&lt;p&gt;I thought it would work. I like using &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; to take full advantage of delayed enumeration, rather than creating new lists or arrays all the time.&lt;/p&gt;

&lt;p&gt;Everything looks right; the return types are good. Except it won’t compile. You get a nice message about having to use &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; inside an iterator when trying to return &lt;code class=&quot;highlighter-rouge&quot;&gt;(IEnumerabl&amp;lt;T&amp;gt;)obj&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;Don’t try &lt;code class=&quot;highlighter-rouge&quot;&gt;yield return (IEnumerable&amp;lt;T&amp;gt;)obj&lt;/code&gt;. That will do exactly what you’d think. It won’t compile either, because now the return types don’t match, because &lt;code class=&quot;highlighter-rouge&quot;&gt;yield return (IENumerable&amp;lt;T&amp;gt;)obj&lt;/code&gt; needs a method return type of &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerable&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what to do?&lt;/p&gt;

&lt;p&gt;Obviously, try &lt;code class=&quot;highlighter-rouge&quot;&gt;yield break&lt;/code&gt;. Because nothing else is making sense at this point. But of course, that’s not what &lt;code class=&quot;highlighter-rouge&quot;&gt;yield break&lt;/code&gt; is for in the least, so it doesn’t work. Yay, not completely crazy.&lt;/p&gt;

&lt;p&gt;This issue didn’t come up for me until I was trying to combine recursion &amp;amp; LINQ-expressions. And was stumped. Googling the motivator (LINQ and recursion) yielded (pun intended) no valuable results.&lt;/p&gt;

&lt;p&gt;I grabbed the nearest .NET nerd of my colleagues, and went straight to the whiteboard. In doing so, I realized that recursion has nothing to do with this not compiling (still not crazy!). On the other hand I still had to convince my colleague that the code wouldn’t compile. (He went thru literally the same steps I did. Again, not crazy).&lt;/p&gt;

&lt;p&gt;So we seem to have found a cool nugget in the compiler, that seems to say, “if you want to &lt;code class=&quot;highlighter-rouge&quot;&gt;yield return&lt;/code&gt; once in a method, you must &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; all other returns in that method.” OK. That actually kind of makes sense. Delayed enumeration would mean that the compiler is wanting to deal w/ things granularly.&lt;/p&gt;

&lt;p&gt;My (sad hack of a) solution: Fake the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoesActuallyWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FakeYield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FakeYield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that to avoid explicitly instantiating lists.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Sep 2016 13:55:00 -0700</pubDate>
        <link>https://clintcparker.com/2016/09/11/how-yield-works/</link>
        <guid isPermaLink="true">https://clintcparker.com/2016/09/11/how-yield-works/</guid>
        
        
      </item>
    
  </channel>
</rss>
